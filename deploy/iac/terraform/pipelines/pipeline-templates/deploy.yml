parameters:
- name: BUILD_NUMBER
- name: ACR_LOGIN_SERVER
- name: serviceConnectionName
- name: resourceGroupName
- name: kubernetesClusterName
- name: workspace
stages:
- stage: deploy_cluster_to_${{ parameters.workspace }}_environment 
  displayName: deploy  to ${{ parameters.workspace }} environment
  jobs:
  - deployment: DeployToKubernetesCluster
    displayName: deploy aks configuration files
    pool:
      vmImage: "ubuntu-18.04"
    
    environment: ${{ parameters.workspace }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: PowerShell@2
            displayName: Set variables from parameters
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.setvariable variable=ACR_LOGIN_SERVER]${{ parameters.ACR_LOGIN_SERVER }}"
                Write-Host "##vso[task.setvariable variable=BUILD_NUMBER]${{ parameters.BUILD_NUMBER }}"
          - task: replacetokens@3
            displayName: Replace Tokens in kubernetes configuration files
            inputs:
              rootDirectory: 'deploy/kubernetes/aks-agic-apim'
              targetFiles: '**\*.yml'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              actionOnNoFiles: 'continue'
              enableTransforms: false
              tokenPrefix: '__'
              tokenSuffix: '__'
              useLegacyPattern: false
              enableTelemetry: true
          # - task: Kubernetes@1
          #   displayName: Apply kubernetes configuration files
          #   inputs:
          #     connectionType: 'Azure Resource Manager'
          #     azureSubscriptionEndpoint: '${{ parameters.serviceConnectionName }}'
          #     azureResourceGroup: '${{ parameters.resourceGroupName }}'
          #     kubernetesCluster: '${{ parameters.kubernetesClusterName }}'
          #     command: 'create'
          #     arguments: 'secret tls agic-ingress-tls --namespace default --key agic-ingress-tls.key --cert agic-ingress-tls.crt'
          #     secretType: 'dockerRegistry'
          #     containerRegistryType: 'Azure Container Registry'
          #     workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/kubernetes/aks-agic-apim/ssl-cerificate'
          
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: 'AzureDevOpsServiceConnection'
              ScriptType: 'InlineScript'
              Inline: |
                $secretDeployed =  $false
                $secretName='agic-ingress-tls'
                try {
                    $secret =  kubectl get secret  $secretName  -o json  | ConvertFrom-Json  
                    if ($secret.metadata.name = 'agic-ingress-tls') {
                        $secretDeployed  = $true
                        Write-Host "found  $secretDeployed"
                    }
                    else {
                        $secretDeployed =  $false
                        Write-Host "not found $secretDeployed"
                    }
                }
                catch {
                    Write-Host "not found $secretDeployed"
                    $secretDeployed =  $false
                }
                if (-not $secretDeployed ){
                    kubectl create secret tls agic-ingress-tls --namespace default --key agic-ingress-tls.key --cert agic-ingress-tls.crt
                }
              azurePowerShellVersion: 'LatestVersion'
              workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/kubernetes/aks-agic-apim/ssl-cerificate'
          - task: Kubernetes@1
            displayName: Apply kubernetes configuration files
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '${{ parameters.serviceConnectionName }}'
              azureResourceGroup: '${{ parameters.resourceGroupName }}'
              kubernetesCluster: '${{ parameters.kubernetesClusterName }}'
              command: 'apply'
              arguments: '-f .'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/kubernetes/aks-agic-apim'

     